'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
var make_it_1 = require("../test-suite-methods2/make-it");
var make_after_1 = require("../test-suite-methods2/make-after");
var make_after_each_1 = require("../test-suite-methods2/make-after-each");
var make_before_each_1 = require("../test-suite-methods2/make-before-each");
var make_before_1 = require("../test-suite-methods2/make-before");
var make_inject_1 = require("../test-suite-methods2/make-inject");
var make_describe_1 = require("../test-suite-methods2/make-describe");
var make_after_all_parent_hooks_1 = require("../test-suite-methods2/make-after-all-parent-hooks");
var pragmatik = require('pragmatik');
var rules = require('../helpers/handle-varargs');
var constants = require('../../config/suman-constants').constants;
var make_proxy_1 = require("./make-proxy");
exports.makeSumanMethods = function (suman, TestBlock) {
    var methods = {};
    var inject = make_inject_1.makeInject(suman, this);
    var before = make_before_1.makeBefore(suman, this);
    var after = make_after_1.makeAfter(suman, this);
    var beforeEach = make_before_each_1.makeBeforeEach(suman, this);
    var afterEach = make_after_each_1.makeAfterEach(suman, this);
    var it = make_it_1.makeIt(suman, this);
    var afterAllParentHooks = make_after_all_parent_hooks_1.makeAfterAllParentHooks(suman, this);
    var describe = make_describe_1.makeDescribe(suman, gracefulExit, TestBlock, this, notifyParent, blockInjector);
    var getProxy = make_proxy_1.makeProxy(suman);
    this.describe = this.context = this.suite = getProxy(describe, rules.blockSignature);
    this.it = this.test = getProxy(it, rules.testCaseSignature);
    this.inject = getProxy(inject, rules.hookSignature);
    this.before = this.beforeAll = this.setup = getProxy(before, rules.hookSignature);
    this.beforeEach = this.setupTest = getProxy(beforeEach, rules.hookSignature);
    this.after = this.afterAll = this.teardown = getProxy(after, rules.hookSignature);
    this.afterEach = this.teardownTest = getProxy(afterEach, rules.hookSignature);
    this.afterAllParentHooks = getProxy(afterAllParentHooks, rules.hookSignature);
    return methods;
};
