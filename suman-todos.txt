
//TODO: suman --uninstall for a local project
//TODO: add system lock
//TODO: add ms count for each test/and each test including hooks
//TODO: add transpile option, which will put a suman-target folder in root dir
//TODO: write to .gitignore and put test-suman-target and suman/logs in there
//TODO: optimize TestSuite/TestSuiteBase prototypes in the case that user creates many of these with looping constructs
//TODO: add a gitkeep file to suman/logs etc
//TODO: place array of tests in befores/afters so we know which tests pertain to the hook
//TODO: if a promise or non-undefined value is returned, but cb mode is on, add warning
//TODO: using t.assert etc can help prevent errors not being assigned to tests
//TODO: add support for observables
//TODO: node -c flag to check file for syntax errors
//TODO: tap: https://github.com/TestAnything/testanything.github.io/pull/36
//TODO: implement t.plan/t.timeout
//TODO: mocha and ava are concentric circles inside Suman
//TODO: run tests from current directory when using runner
//TODO: add exit code for hook timeout besides 1
//TODO: if user wants to collect multiple errors per test, they can use t.assert
//TODO: need to add option to include stdout when using runner
//TODO: npm install mocha -g --save-dev
//TODO: overall consolidated table can have a count of failed test files vs passed test files
//TODO: add max memory value in overall table for runner
//TODO: need assertions to print out pretty
//TODO: if using local server and SQLite, then each cp should save data directly to db. however, if remote server, then
// should only the parent process (runner) make the network connection? Possibly remove network code from suman file
//TODO: running with bare node executable should make no network connections and only save to local db if it exists
//TODO: fork() is just a wrapper around spawn(). You can open the file with fs.open(), then pass the file descriptor in the options as { stdio: ['inherit', fd, fd] }
//TODO: need to put std reporter in suman.conf.js
//TODO: https://github.com/nodejs/help
//TODO: runner needs to show tests in table even if they fail out before sending table data
//TODO: https://hellocoding.wordpress.com/2015/01/19/delete-all-commit-history-github/
//TODO: have to allow users to use bash scripts as hooks to setup process information, this involves
// having an option to use spawn instead of fork in the runner, see ./lib/bash/a and ./lib/bash/b
//TODO: https://github.com/JacksonGariety/gulp-nodemon/issues/110#event-628179539
//TODO: did you forget to call done? should become "did you forget to call fail/pass?" etc under right conditions
//TODO: implement Test.on('end') or Test.on('completed');
//TODO: if you can get tired of using this.it, you have two options, chain them, or put them in a series/parallel block
//TODO: need glob support for source //https://github.com/isaacs/node-glob
//TODO: http://altamodatech.com/blogs/?p=452  //How To Use Mocha for Node Testing in Windows
//TODO: TESTS=$(shell find test/ -name "*.test.js")
//TODO: makefiles vs. gulp vs. plain js
//TODO: need glob support for source
//TODO: to be compliant with Babel transpilation, need to put context for functions in extra param
//TODO: https://github.com/gotwarlost/istanbul/issues/596#issuecomment-208688593
//TODO: http://blog.yld.io/2016/01/13/using-streams/#.VwyjZZMrKXk
//TODO: freeze module.exports inside the init fn, iff module.exports.keys.lenght ===0
//TODO: http://stackoverflow.com/questions/10753288/how-to-specify-test-directory-for-mocha
//TODO: https://github.com/substack/picture-tube
//TODO: need to test skip and only thoroughly
//TODO: hooks after suman runs (opposite of suman.once.js) could be for collecting code/test coverage
//TODO: whatever is returned in a beforeEach hook should be assigned to each test (?) NO, multiple hooks would overwrite ret
//TODO: suman postinstall script
//TODO: add hyperlinks to terminal window for table output
//TODO: give ability to users to provide shell scripts to launch individual mocha tests, that way they can provide environment
// settings for child_process, shell scripts should be in a directory called sh in the same directory as the test
//  see ./bash/a and ./bash/b
//TODO: bail needs to be implemented for runner as well as individual tests
//TODO: bail + hooks https://github.com/mochajs/mocha/issues/690
//TODO: hooks always run ==> less conditionals ==> even if all tests are stubbed out, hooks still run, which makes sense
//TODO: conversion, this.title needs to work for a describe block (same as this.desc)
//TODO: add support question to gulp github to see if we can use special key combo with gulp for below item
//TODO: add suman.gulp.js => watches with special key combo will transpile tests
//TODO: need to add ability to kill test runner after it's started - https://gist.github.com/tedmiston/5935757
//TODO: nice docs => https://cdnjs.com/libraries/backbone.js/tutorials/organizing-backbone-using-modules
//TODO: https://github.com/mochajs/mocha/issues/492
//TODO: https://www.npmjs.com/package/tap-mocha-reporter
//TODO: need to make sure to make suman_results readable/writable (move to sqlite3)
//TODO: need to figure out way to grep suite name without having to run the test
//TODO: need to implement  -b, --bail   => bail after first test failure
//TODO: suman command line input should allow for a file and directory combination
//TODO: readme needs to have examples by ES5, ES6, ES7
//TODO: default configuration should provide default values using lodash defaults / underscore defaults
//TODO: switch from underscore to lodash
//TODO: get it to work with Istanbul/NYC
//TODO: special key combo (ctrl+save+r) will run tests after a change, using gulp file watchers?
//TODO: https://nodejs.org/en/blog/uncategorized/profiling-node-js/
//TODO: npm i babel -g, then babel-node --stage 0 myapp.js
//TODO: https://github.com/nodejs/node/issues/5252
//TODO: need a suman server stop command at the command line
//TODO, along with options {plan:3}, {timeout:true}, {parallel:true}, {delay:100} we should have {throws:true}, so that we expect a test to throw an (async) error...
//TODO: if error is thrown after test is completed (in a setTimeout, for example) do we handle that?
//TODO: if suman/suman runner runs files and they are not suman suites, then suman needs to report that!!
//TODO: randomize test runs as per https://github.com/sindresorhus/ava/issues/595
//TODO: steal unicode chars from existing projects
//TODO: does babel-node work with child_processes?
//TODO: create suman --diagnostics option at command line to check for common problems with both project and test suites
//TODO: write metadata file out along with txt files
//TODO  need to add a delay option for tests running in a loop (why? => google github issue)
//TODO  on ms windows error messages do not always give url/link/path of test file with error
//TODO: https://github.com/nodejs/node/issues/5252#issuecomment-212784934
//TODO: implement Test.on('end') so that we can force exit the test using process.exit()
//TODO: if this.it.only is declared need to declare other test cases as "skipped"
//TODO: allow hooks to be skipped

/* advantages of Suman
 *
 * better than mocha, cleaner than vows
 * no globals - no global NPM module - no global variables
 * test suites each run in separate process for speed and correctness
 * each test suite can have parallel components, allowing the developer to run tests serially, in parallel or in combination, as the developer sees fit
 * code inside any test will not run for any test not intended to run when using grep features
 * organize your tests depending on NODE_ENV or command line flags using config files, instead of putting tests in different top-level folders in your project
 *  asynchronous reporting capablities - write test results to DB
 *  3 reasons to use nested describes?
 *  (1) to control parallel flow - nesting in describe can force to run in series
 *  (2) skip/only - allow you to skip whole sections of a test suite
 *  (3) labelling of output - nesting in describes allows you to label and organize the output from your tests
 *
 * */


//TODO: if parent is parallel, it test cases don't seem to run in parallel
//TODO: if callback is called twice in hook or test, ignore the second, just throw an error
//TODO: move to lodash, ditch underscore
//TODO: use fs.createReadStream to check files to see if they are actually Suman tests in safe mode
//TODO: need to check to make sure the tests have different names, before running (namespace can have filepath in front to prevent clashing)
//TODO: note: https://www.npmjs.com/package/gulp-mocha
//TODO: use Object.defineProperties for read-only


/*

 //TODO: support this style:

 this.it('[test] yo 2', {parallel: false}, new Promise(function (resolve, reject) {

 Promise.delay(1000).then(function () {
 resolve();
 });

 }).then(function(){

 }));

 */